{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","style","maxWidth","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","children","overflowY","height","border","ErrorBoundary","props","state","hasError","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","App","onRequestRobots","onSearchChange","isPending","error","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","resp","json","users","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2ed64921.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img style={{ maxWidth: '200px'}} src={`https://robohash.org/${id}?size=200x200`} alt='robot' />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"cards-wrapper\">\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={user.id}\r\n              name={user.name}\r\n              email={user.email}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', height: '800px', border: '1px solid black'}}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That's not good.</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => ({ count: state.count + 1}));\r\n  }\r\n  render() {\r\n    console.log('CounterButton');\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return false;\r\n  // }\r\n\r\n  render() {\r\n    console.log('Header');\r\n    return (\r\n      <header>\r\n        <h1 className='f1'>Robofriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending, error } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return isPending ?\r\n      <h1 className=\"tc\">Loading...</h1> :\r\n      error === '' ? \r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      ) :\r\n      (<h1 className=\"tc\">There's a trouble with the server</h1>)\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(resp => resp.json())\r\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return {...state, searchField: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true }\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, isPending: false, robots: action.payload }\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, isPending: false, error: action.payload }\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'tachyons';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { logger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestRobots\r\n})\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger),\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}